"""
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
31    32         3    5    32        3    5    8    3
37    43         2    4    6         8    3    7    1
51    86        -1   64   -8
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
 Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
первым элементом первой строки второй матрицы и т.д.
"""

class Matrix:
    def __init__(self, my_list):
        self.my_list = my_list

    def __str__(self):
        for el in self.my_list:
            for i in el:
                print(f'{i:3}', end='')
            print()
        return ''

    def __add__(self, my_lis):
        for i in range(len(self.my_list)):
            for j in range(len(my_lis.my_list[i])):
                self.my_list[i][j] = self.my_list[i][j] + my_lis.my_list[i][j]
        return Matrix.__str__(self)


neo = Matrix([[5, -2, 3], [4, 0, -1], [1, 6, 2]])
trinity = Matrix([[-3, 1, 0], [-2, 6, -1], [3, 0, -2]])
print('Матрица сложения двух исходных: ')
print(neo.__add__(trinity))